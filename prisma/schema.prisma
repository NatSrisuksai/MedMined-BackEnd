// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // ใช้ตอน migrate/deploy
}

generator client {
  provider = "prisma-client-js"
}

enum MealRelation {
  BEFORE_BREAKFAST   // 07:00
  AFTER_BREAKFAST    // 08:00
  BEFORE_LUNCH       // 11:00
  AFTER_LUNCH        // 12:00
  BEFORE_DINNER      // 15:00
  AFTER_DINNER       // 16:00
  BEFORE_BED         // 20:00
  CUSTOM
}

enum DosePeriod {
  MORNING
  NOON
  EVENING
  BEDTIME
  CUSTOM
}

model Patient {
  id         String   @id @default(uuid())
  // ✅ แยกชื่อ-สกุล + ข้อมูลเพิ่ม
  firstName  String?
  lastName   String?
  fullName   String // เก็บรวมเพื่อสะดวกแสดงผล (อัปเดตตาม first/last ในแอป)
  age        Int?
  hn         String?  @unique
  lineUserId String?  @unique
  createdAt  DateTime @default(now())

  prescriptions Prescription[]
  inventories   MedicationInventory[]

  // จำใบยา “ล่าสุด” ที่เพิ่งสแกน/activate (ช่วยให้กดปุ่ม “คลังยา” แบบเดิมได้ด้วยถ้าจะใช้)
  recentActivatedPrescriptionId String? @unique

  recentActivatedPrescription Prescription? @relation("RecentActivated", fields: [recentActivatedPrescriptionId], references: [id])

  DoseIntake DoseIntake[]
}

model Prescription {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  opaqueId String @unique

  // ✅ ฟิลด์เอกสาร/ยาใหม่
  issueDate     DateTime? // วันที่กรอก/ออกใบจ่ายยา
  drugName      String
  quantityTotal Int? // จำนวนเม็ดยาทั้งหมดที่ได้รับ/ต้องทานจนหมด
  method        MealRelation? // BEFORE/AFTER/WITH/NONE
  notes         String?

  // ✅ ตารางเวลาแบบ “รายมื้อ/ช่วง” โดยแยกไปที่ DoseSchedule (ด้านล่าง)
  // ถ้าต้องการเข้ากันได้กับเดิม (ที่เป็น timesCsv HH:mm) ยังเก็บไว้ได้ แต่ cron ใหม่จะอิง DoseSchedule แทน
  timezone  String    @default("Asia/Bangkok")
  startDate DateTime
  endDate   DateTime?

  // ✅ ตีตราว่า “ได้รับยาแล้ว” เมื่อ activate สำเร็จ
  receivedAt DateTime?

  createdAt DateTime @default(now())

  // ความสัมพันธ์ย้อนกลับ (ไม่ต้องแก้)
  recentActivatedBy Patient? @relation("RecentActivated")

  // ตารางย่อย: ตารางมื้อยา
  schedules DoseSchedule[]
  intakes   DoseIntake[]

  MedicationInventory MedicationInventory[]
}

model DoseSchedule {
  id             String       @id @default(uuid())
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  period         MealRelation
  hhmm      String // "08:00" (หรือค่าจากแบบฟอร์ม เช่น เช้า=08:00, กลางวัน=12:00, เย็น=18:00, ก่อนนอน=22:00)
  pills     Int // จำนวนเม็ดใน “มื้อ/ช่วง” นี้
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())

  @@index([prescriptionId])
}

model MedicationInventory {
  id             String   @id @default(uuid())
  patientId      String
  prescriptionId String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])

  prescription Prescription @relation(fields: [prescriptionId], references: [id])

  @@unique([patientId, prescriptionId])
  @@index([patientId])
  @@index([prescriptionId])
}

model NotificationLog {
  id             String   @id @default(uuid())
  patientId      String
  prescriptionId String
  hhmm           String // เวลาในมื้อ เช่น "08:00"
  slotDate       DateTime?
  sentAt         DateTime @default(now())

  @@index([patientId, prescriptionId, hhmm, slotDate, sentAt])
}

model DoseIntake {
  id             String   @id @default(uuid())
  patientId      String
  prescriptionId String
  hhmm           String
  slotDate       DateTime // วันที่ของมื้อนั้น (00:00)
  takenAt        DateTime @default(now())
  pills          Float // จำนวนเม็ดที่ทานจริงในมื้อ/ครั้งนี้ (ปกติ = schedules.pills)

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  // กันกดซ้ำมื้อเดียวกันในวันเดียว
  @@unique([patientId, prescriptionId, slotDate, hhmm])
  @@index([patientId, prescriptionId, slotDate, hhmm])
}
